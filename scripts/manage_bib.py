import bib

resource_list = bib.populate_resource_list()

#resource_list = sorted(resource_list)
cited_resource_list = []

#sorted(resource_list, key=lambda word: [alphabet.index(c) for c in word])
def get_cite_text(match):
  global cited_resource_list
  key = match.group()

  # remove @s
  key = key[1:-1]

  for idx, val in enumerate(resource_list):
    if val.cit_key == key:
      if val not in cited_resource_list:
        cited_resource_list.append(val)
      return val.cit_text
  raise SyntaxError("Unknown ref key: " + key)
  
def get_bib_str():
  bib_str = """
<!-- THIS FILE IS AUTOGENERATED. DO NOT EDIT DIRECTLY -->

# References {.unnumbered}

The list of references (below) is alphabetized.
Arabic works are alphabetized according to the cited term.
Western works are alphabetized according to author last name and occur after the Arabic works.

"""

  global cited_resource_list

  # sort alphabetically
  cited_resource_list = sorted(cited_resource_list)

  bib_str += '#### Arabic works {.unnumbered}\n\n'
  western_started = False
  for idx, val in enumerate(cited_resource_list):

    if not western_started and val.sort_key[0] >= 'a' and val.sort_key[0] <= 'z':
      western_started = True
      bib_str += '\n#### Western works {.unnumbered}\n\n'

    if not western_started:
      bib_str += '::: {.ar}\n'

    bib_str += '{: 4d}'.format(idx+1) + '. ' + val.bib_text + '\n'

    if not western_started:
      bib_str += ':::\n\n'

  # print unused ones
  print("The following references are not cited, fyi:")

  for val in resource_list:
    if val not in cited_resource_list:
      print(val.cit_text)

  return bib_str

