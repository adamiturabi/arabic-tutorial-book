
class Resource:

  alphabet = "ابتثجحخدذرزسشصضطظعغفقكلمنهةويىabcdefghijklmnopqrstuvwxyz"

  def __init__(self, cit_key, cit_text, bib_text=None, sort_key=None):
    if bib_text is None:
      bib_text = cit_text
    if sort_key is None:
      sort_key = cit_text

    self.cit_key = cit_key
    self.cit_text = cit_text
    self.bib_text = bib_text
    self.sort_key = self.sanitize_sort_key(sort_key)
    # TODO check that sort_key contains only alphabet

  def sanitize_sort_key(self, s):
    # remove whitespace
    s = "".join(s.split())

    # remove .ar span if enclosed by it
    if s[0] == '[' and len(s) >= 8 and s[-6:] == ']{.ar}':
      s = s[1:-6]

    # make lowercase
    s = s.lower()

    # normalize arabic characters to their canonical basic letter
    import unicodedata
    s = unicodedata.normalize('NFD',s)

    return s

  def __eq__(self, other):
    return self.cit_key == other.cit_key

  def __lt__(self, other):
    tmp_list = [self.sort_key, other.sort_key]
    out_list = sorted(tmp_list, key=lambda word: [self.alphabet.index(c) for c in word])
    return out_list[0] == tmp_list[0]


resource_list = []


resource_list.append(Resource(
  "nahw_wafi"
  , cit_text = "[النحو الوافي]{.ar}"
  , bib_text = "[النحو الوافي، تأليف: عباس حسن، دار المعارف.]{.ar}"
  ))

resource_list.append(Resource(
  "maani_nahw"
  , cit_text = "[معاني النحو]{.ar}"
  , bib_text = "[معاني النحو، تأليف: فاضل صالح السامرائي. الطبعة الثالثة، دار ابن كثير، 2022\\ م.]{.ar}"
  ))

resource_list.append(Resource(
  "nahw_arabi"
  , cit_text = "[النحو العربي: أحكام ومعان]{.ar}"
  , bib_text = "[النحو العربي: أحكام ومعان، تأليف: فاضل صالح السامرائي. الطبعة الأولى، دار ابن كثير، 2014\\ م.]{.ar}"
  , sort_key = "[النحو العربي احكام ومعان]{.ar}"
  ))

resource_list.append(Resource(
  "radiy_kafiyah"
  , cit_text = "[شرح الرضي على الكافية]{.ar}"
  , bib_text = "[شرح الكافية في النحو، تأليف: رضي الدين محمد بن الحسن الاستراباذي (ت: 686\\ هـ).]{.ar}"
  , sort_key = "شرح الرضي على الكافية"
  ))

resource_list.append(Resource(
  "wright"
  , cit_text = "Wright"
  , bib_text = "Wright,\\ W., _Arabic grammar_, 3rd ed."
  ))

resource_list.append(Resource(
  "fischer"
  , cit_text = "Fischer"
  , bib_text = "Fischer,\\ W., _A grammar of classical Arabic_, 3rd rev. ed., translated by J.\\ Rodgers, Yale University Press."
  ))

#resource_list = sorted(resource_list)
cited_resource_list = []

#sorted(resource_list, key=lambda word: [alphabet.index(c) for c in word])
def get_cite_text(match):
  global cited_resource_list
  key = match.group()

  # remove @s
  key = key[1:-1]

  for idx, val in enumerate(resource_list):
    if val.cit_key == key:
      if val not in cited_resource_list:
        cited_resource_list.append(val)
      return val.cit_text
  raise SyntaxError("Unknown ref key: " + key)
  
def get_bib_str():
  bib_str = """
<!-- THIS FILE IS AUTOGENERATED. DO NOT EDIT DIRECTLY -->

# References {.unnumbered}

The list of references (below) is alphabetized.
Arabic works are alphabetized according to the cited term.
Western works are alphabetized according to author last name and occur after the Arabic works.

"""

  global cited_resource_list

  # sort alphabetically
  cited_resource_list = sorted(cited_resource_list)

  bib_str += '#### Arabic works {.unnumbered}\n\n'
  western_started = False
  for idx, val in enumerate(cited_resource_list):

    if not western_started and val.sort_key[0] >= 'a' and val.sort_key[0] <= 'z':
      western_started = True
      bib_str += '\n#### Western works {.unnumbered}\n\n'

    if not western_started:
      bib_str += '::: {.ar}\n'

    bib_str += '{: 4d}'.format(idx+1) + '. ' + val.bib_text + '\n'

    if not western_started:
      bib_str += ':::\n\n'

  # print unused ones
  print("The following references are not cited, fyi:")

  for val in resource_list:
    if val not in cited_resource_list:
      print(val.cit_text)

  return bib_str

